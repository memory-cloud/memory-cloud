version: "2"
services:
  # Nginx Load Balancer
  loadbalancer:
    build: ./loadbalancer-ssl
    ports:
     - "443:443"
     - "80:80"
    depends_on:
     - "app4"
    networks:
     - frontend
    restart: always
    mem_limit: 64mb
    environment:
    - SERVER_NAME=memory-cloud.io

  # Apps - scalable
  app1:
    build: ./app
    depends_on:
     - "setup-rs"
     - "cache"
    networks:
     - frontend
     - backend
    restart: always
    mem_limit: 256mb
  app2:
    build: ./app
    depends_on:
     - "app1"
    networks:
     - frontend
     - backend
    restart: always
    mem_limit: 256mb
  app3:
    build: ./app
    depends_on:
     - "app2"
    networks:
     - frontend
     - backend
    restart: always
    mem_limit: 256mb
  app4:
    build: ./app
    depends_on:
     - "app3"
    networks:
     - frontend
     - backend
    restart: always
    mem_limit: 256mb
     
  # MongoDB Replica Set
  mongo-rs0-1:
    build: ./mongo-rs0-1
    volumes:
     - rs0-1:/data/db
    depends_on:
     - "mongo-rs0-2"
     - "mongo-rs0-3"
    networks:
     - backend
    restart: always
    mem_limit: 256mb
  mongo-rs0-2:
    image: "mongo:4.0-xenial"
    command: --replSet rs0 --smallfiles --oplogSize 128
    volumes:
     - rs0-2:/data/db
    networks:
     - backend
    restart: always
    mem_limit: 256mb
  mongo-rs0-3:
    image: "mongo:4.0-xenial"
    command: --replSet rs0 --smallfiles --oplogSize 128
    volumes:
     - rs0-3:/data/db
    networks:
     - backend
    restart: always
    mem_limit: 256mb
  setup-rs:
    build: ./setup
    depends_on:
     - "mongo-rs0-1"
    networks:
     - backend
    mem_limit: 64mb

  # Redis Cache
  cache:
    image: redis:alpine
    networks:
     - backend
    mem_limit: 64mb
     
  # adminmongo:
  #   image: "google/cadvisor"
  #   networks:
  #    - backend
  #    - frontend
  #   mem_limit: 64mb
  #   volumes:
  #    - /:/rootfs:ro
  #    - /var/run:/var/run:rw
  #    - /sys:/sys:ro
  #    - /var/lib/docker/:/var/lib/docker:ro
  #    - /dev/disk/:/dev/disk:ro

networks:
  frontend:
  backend:

volumes:
  rs0-1:
  rs0-2:
  rs0-3:
